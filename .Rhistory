compare_weeks = cases %>%
dplyr::filter(area_type == "ltla") %>%
dplyr::group_by(area_name, id, date_range) %>%
dplyr::summarise(total = sum(cases)) %>%
spread(date_range, total)
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks =
compare_weeks %>%
mutate(delta = last_week - two_weeks_ago,
delta_pct =  round(((last_week - two_weeks_ago)/two_weeks_ago) * 100,0)) %>%
arrange(-delta) %>%
dplyr::select(-"<NA>")
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks = join(population, compare_weeks, by="id")
# add population data
path <- "population"
population <- read_feather(path)
setwd("coronavirus/coronashinyapp/")
### DATA PROCESSING
#---------------------------------------------------------------------------------------------------------------------------------------------------
# cases data
cases <- read_csv('https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv')
# deaths data
deaths <- read_csv('https://coronavirus.data.gov.uk/downloads/csv/coronavirus-deaths_latest.csv')
# England population data
# add population data
path <- "population"
population <- read_feather(path)
# rename columns
cases <- cases %>%
dplyr::rename(cases=`Daily lab-confirmed cases`, day =`Specimen date`, area_name='Area name', area_type = `Area type`, id = `Area code`)
deaths <- deaths %>%
dplyr::rename(deaths=`Daily change in deaths`, day =`Reporting date`, area_name='Area name', area_type = `Area type`)
# define 1 and 2 weeks ago
if (weekdays(Sys.Date()) %in%  c("Monday", "Tuesday")) {
one_week_ago = isoweek(Sys.Date()) - 2
} else {
one_week_ago = isoweek(Sys.Date()) - 1
}
two_weeks_ago = one_week_ago - 1
# identify days corresponding to 1 and 2 weeks ago
cases <- cases %>%
mutate(date_range = case_when(isoweek(day) == one_week_ago ~ "last_week",
isoweek(day) == two_weeks_ago ~ "two_weeks_ago"))
deaths <- deaths %>%
mutate(date_range = case_when(isoweek(day) == one_week_ago ~ "last_week",
isoweek(day) == two_weeks_ago ~ "two_weeks_ago"))
# create comparison table between two past weeks
compare_weeks = cases %>%
dplyr::filter(area_type == "ltla") %>%
dplyr::group_by(area_name, id, date_range) %>%
dplyr::summarise(total = sum(cases)) %>%
spread(date_range, total)
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks =
compare_weeks %>%
mutate(delta = last_week - two_weeks_ago,
delta_pct =  round(((last_week - two_weeks_ago)/two_weeks_ago) * 100,0)) %>%
arrange(-delta) %>%
dplyr::select(-"<NA>")
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks = join(population, compare_weeks, by="id")
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks %>% mutate(
cases_per_100k_past2weeks = round((last_week+two_weeks_ago)/compare_weeks$X2018 * 100000,0),
delta_100k = (last_week - two_weeks_ago) / X2018 * 100000
)
compare_weeks =
compare_weeks %>% mutate(
cases_per_100k_past2weeks = round((last_week+two_weeks_ago)/compare_weeks$X2018 * 100000,0),
delta_100k = (last_week - two_weeks_ago) / X2018 * 100000
)
compare_weeks[compare_weeks$delta_pct == Inf,]$delta_pct <- 100
runApp()
runApp()
local = cases %>%
filter(area_type == "ltla")
# this is table data to output as table
tb =
compare_weeks %>%
ungroup() %>%
select(area_name, last_week, two_weeks_ago, delta, delta_pct, cases_per_100k_past2weeks) %>%
dplyr::rename(area = "area_name", `last week` = "last_week", `2 weeks ago` = "two_weeks_ago", `delta, n of cases` = "delta",
`delta, %` = "delta_pct", `cases per 100k in last 2 weeks` = "cases_per_100k_past2weeks", `delta per 100k` = "delta_100k") %>%  arrange(-`delta, n of cases`)
## app.R ##
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(tidyverse)
library(dplyr)
library(lubridate)
library(plotly)
library(shinydashboard)
library(flexdashboard)
library(zoo)
library(shiny)
library(maps)
library(mapdata)
library(maptools)
library(rgdal)
library(ggmap)
library(ggplot2)
library(rgeos)
library(broom)
library(plyr)
library(DT)
library(feather)
library(heatmaply)
library(tidyverse)
### DATA PROCESSING
#---------------------------------------------------------------------------------------------------------------------------------------------------
# cases data
cases <- read_csv('https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv')
# deaths data
deaths <- read_csv('https://coronavirus.data.gov.uk/downloads/csv/coronavirus-deaths_latest.csv')
# England population data
# add population data
path <- "population"
population <- read_feather(path)
# rename columns
cases <- cases %>%
dplyr::rename(cases=`Daily lab-confirmed cases`, day =`Specimen date`, area_name='Area name', area_type = `Area type`, id = `Area code`)
deaths <- deaths %>%
dplyr::rename(deaths=`Daily change in deaths`, day =`Reporting date`, area_name='Area name', area_type = `Area type`)
# define 1 and 2 weeks ago
if (weekdays(Sys.Date()) %in%  c("Monday", "Tuesday")) {
one_week_ago = isoweek(Sys.Date()) - 2
} else {
one_week_ago = isoweek(Sys.Date()) - 1
}
two_weeks_ago = one_week_ago - 1
# identify days corresponding to 1 and 2 weeks ago
cases <- cases %>%
mutate(date_range = case_when(isoweek(day) == one_week_ago ~ "last_week",
isoweek(day) == two_weeks_ago ~ "two_weeks_ago"))
deaths <- deaths %>%
mutate(date_range = case_when(isoweek(day) == one_week_ago ~ "last_week",
isoweek(day) == two_weeks_ago ~ "two_weeks_ago"))
# create comparison table between two past weeks
compare_weeks = cases %>%
dplyr::filter(area_type == "ltla") %>%
dplyr::group_by(area_name, id, date_range) %>%
dplyr::summarise(total = sum(cases)) %>%
spread(date_range, total)
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks =
compare_weeks %>%
mutate(delta = last_week - two_weeks_ago,
delta_pct =  round(((last_week - two_weeks_ago)/two_weeks_ago) * 100,0)) %>%
arrange(-delta) %>%
dplyr::select(-"<NA>")
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks = join(population, compare_weeks, by="id")
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks =
compare_weeks %>% mutate(
cases_per_100k_past2weeks = round((last_week+two_weeks_ago)/compare_weeks$X2018 * 100000,0),
delta_100k = (last_week - two_weeks_ago) / X2018 * 100000
)
compare_weeks[compare_weeks$delta_pct == Inf,]$delta_pct <- 100
# get all local authorities which had Covid cases
local = cases %>%
filter(area_type == "ltla")
# this is table data to output as table
tb =
compare_weeks %>%
ungroup() %>%
select(area_name, last_week, two_weeks_ago, delta, delta_pct, cases_per_100k_past2weeks) %>%
dplyr::rename(area = "area_name", `last week` = "last_week", `2 weeks ago` = "two_weeks_ago", `delta, n of cases` = "delta",
`delta, %` = "delta_pct", `cases per 100k in last 2 weeks` = "cases_per_100k_past2weeks", `delta per 100k` = "delta_100k") %>%  arrange(-`delta, n of cases`)
runApp()
runApp()
# this is table data to output as table
tb =
compare_weeks %>%
ungroup() %>%
select(area_name, last_week, two_weeks_ago, delta, cases_per_100k_past2weeks, delta_100k) %>%
dplyr::rename(area = "area_name", `last week` = "last_week", `2 weeks ago` = "two_weeks_ago", `delta, n of cases` = "delta",
`cases per 100k population in last 2 weeks` = "cases_per_100k_past2weeks", `2 weeks' delta per 100k population` = "delta_100k") %>%
arrange(-`2 weeks' delta per 100k population`)
tb =
compare_weeks %>%
ungroup() %>%
select(area_name, last_week, two_weeks_ago, delta, cases_per_100k_past2weeks, delta_100k) %>%
dplyr::rename(area = "area_name", `last week` = "last_week", `2 weeks ago` = "two_weeks_ago", `delta, n of cases` = "delta",
`cases per 100k population in last 2 weeks` = "cases_per_100k_past2weeks", `2 weeks' delta per 100k population` = "delta_100k") %>%
arrange(-`2 weeks' delta per 100k population`)
View(tb)
runApp()
shiny::runApp()
## app.R ##
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(tidyverse)
library(dplyr)
library(lubridate)
library(plotly)
library(shinydashboard)
library(flexdashboard)
library(zoo)
library(shiny)
library(maps)
library(mapdata)
library(maptools)
library(rgdal)
library(ggmap)
library(ggplot2)
library(rgeos)
library(broom)
library(plyr)
library(DT)
library(feather)
library(heatmaply)
library(tidyverse)
library(memoise)
library(httr)
#' Extracts paginated data by requesting all of the pages
#' and combining the results.
#'
#' @param filters    API filters. See the API documentations for
#'                   additional information.
#'
#' @param structure  Structure parameter. See the API documentations
#'                   for additional information.
#'
#' @return list      Comprehensive list of dictionaries containing all
#'                   the data for the given ``filter`` and ``structure`.`
get_paginated_data <- function (filters, structure) {
endpoint     <- "https://api.coronavirus.data.gov.uk/v1/data"
results      <- list()
current_page <- 1
repeat {
httr::GET(
url   = endpoint,
query = list(
filters   = paste(filters, collapse = ";"),
structure = jsonlite::toJSON(structure, auto_unbox = TRUE),
page      = current_page
),
timeout(10)
) -> response
# Handle errors:
if ( response$status_code >= 400 ) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if ( response$status_code == 204 ) {
break
}
# Convert response from binary to JSON:
json_text <- content(response, "text")
dt        <- jsonlite::fromJSON(json_text)
results   <- rbind(results, dt$data)
if ( is.null( dt$pagination$`next` ) ){
break
}
current_page <- current_page + 1;
}
return(results)
}
### NATIONS
# Create filters:
query_filters <- c(
"areaType=nation"
)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesByPublishDate",
deaths = "newDeaths28DaysByPublishDate"
)
result <- get_paginated_data(query_filters, query_structure)
deaths <- as.data.frame(result)
# cases data
cases <- read_csv('https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv')
# deaths data
#deaths <- read_csv('https://coronavirus.data.gov.uk/downloads/csv/coronavirus-deaths_latest.csv') -- old source
# England population data
# add population data
path <- "population"
population <- read_feather(path)
View(deaths)
View(cases)
View(population)
cases <- cases %>%
dplyr::rename(cases=`Daily lab-confirmed cases`, day =`Specimen date`, area_name='Area name', area_type = `Area type`, id = `Area code`)
deaths <- deaths %>%
dplyr::rename(day =`date`, area_name='name') %>%
mutate(day = as.Date(day))
if (weekdays(Sys.Date()) %in%  c("Monday", "Tuesday")) {
one_week_ago = isoweek(Sys.Date()) - 2
} else {
one_week_ago = isoweek(Sys.Date()) - 1
}
two_weeks_ago = one_week_ago - 1
cases <- cases %>%
mutate(date_range = case_when(isoweek(day) == one_week_ago ~ "last_week",
isoweek(day) == two_weeks_ago ~ "two_weeks_ago"))
deaths <- deaths %>%
mutate(date_range = case_when(isoweek(day) == one_week_ago ~ "last_week",
isoweek(day) == two_weeks_ago ~ "two_weeks_ago"))
deaths[is.na(deaths)] <- 0
compare_weeks = cases %>%
dplyr::filter(area_type == "ltla") %>%
dplyr::group_by(area_name, id, date_range) %>%
dplyr::summarise(total = sum(cases)) %>%
spread(date_range, total)
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks =
compare_weeks %>%
mutate(delta = last_week - two_weeks_ago,
delta_pct =  round(((last_week - two_weeks_ago)/two_weeks_ago) * 100,0)) %>%
arrange(-delta) %>%
dplyr::select(-"<NA>")
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks = join(population, compare_weeks, by="id")
compare_weeks[is.na(compare_weeks)] <- 0
compare_weeks =
compare_weeks %>% mutate(
cases_per_100k_past2weeks = round((last_week+two_weeks_ago)/compare_weeks$X2018 * 100000,0),
delta_100k = round((last_week - two_weeks_ago) / X2018 * 100000,1)
)
compare_weeks[compare_weeks$delta_pct == Inf,]$delta_pct <- 100
View(compare_weeks)
compare_weeks[compare_weeks$delta_pct == Inf,]
nrow(compare_weeks[compare_weeks$delta_pct == Inf,])>0
runApp()
shiny::runApp()
shiny::runApp()
## app.R ##
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(tidyverse)
library(dplyr)
library(lubridate)
library(plotly)
library(shinydashboard)
library(flexdashboard)
library(zoo)
library(shiny)
library(maps)
library(mapdata)
library(maptools)
library(rgdal)
library(ggmap)
library(ggplot2)
library(rgeos)
library(broom)
library(plyr)
library(DT)
library(feather)
library(heatmaply)
library(tidyverse)
library(memoise)
library(httr)
#' Extracts paginated data by requesting all of the pages
#' and combining the results.
#'
#' @param filters    API filters. See the API documentations for
#'                   additional information.
#'
#' @param structure  Structure parameter. See the API documentations
#'                   for additional information.
#'
#' @return list      Comprehensive list of dictionaries containing all
#'                   the data for the given ``filter`` and ``structure`.`
get_paginated_data <- function (filters, structure) {
endpoint     <- "https://api.coronavirus.data.gov.uk/v1/data"
results      <- list()
current_page <- 1
repeat {
httr::GET(
url   = endpoint,
query = list(
filters   = paste(filters, collapse = ";"),
structure = jsonlite::toJSON(structure, auto_unbox = TRUE),
page      = current_page
),
timeout(10)
) -> response
# Handle errors:
if ( response$status_code >= 400 ) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if ( response$status_code == 204 ) {
break
}
# Convert response from binary to JSON:
json_text <- content(response, "text")
dt        <- jsonlite::fromJSON(json_text)
results   <- rbind(results, dt$data)
if ( is.null( dt$pagination$`next` ) ){
break
}
current_page <- current_page + 1;
}
return(results)
}
# Create filters:
query_filters <- c(
"areaType=nation"
)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesByPublishDate",
deaths = "newDeaths28DaysByPublishDate"
)
result <- get_paginated_data(query_filters, query_structure)
deaths <- as.data.frame(result)
cases <- read_csv('https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv')
path <- "population"
population <- read_feather(path)
cases <- cases %>%
dplyr::rename(cases=`Daily lab-confirmed cases`, day =`Specimen date`, area_name='Area name', area_type = `Area type`, id = `Area code`)
deaths <- deaths %>%
dplyr::rename(day =`date`, area_name='name') %>%
mutate(day = as.Date(day))
# define 1 and 2 weeks ago
if (weekdays(Sys.Date()) %in%  c("Monday", "Tuesday")) {
one_week_ago = isoweek(Sys.Date()) - 2
} else {
one_week_ago = isoweek(Sys.Date()) - 1
}
two_weeks_ago = one_week_ago - 1
# identify days corresponding to 1 and 2 weeks ago
cases <- cases %>%
mutate(date_range = case_when(isoweek(day) == one_week_ago ~ "last_week",
isoweek(day) == two_weeks_ago ~ "two_weeks_ago"))
View(cases)
View(cases)
two_weeks_ago
one_week_ago
Sys.Date()
Sys.Date()-7
one_weeks_ago_end = Sys.Date() - 7
one_weeks_ago_start = Sys.Date() - 7*2
two_weeks_ago_end = Sys.Date() - 7*3
two_weeks_ago_start = Sys.Date() - 7*4
cases <- cases %>%
mutate(date_range = case_when(day > one_weeks_ago_start & day < one_weeks_ago_end ~ "last_week",
day > two_weeks_ago_start & day < two_weeks_ago_end ~ "two_weeks_ago"))
runApp()
cases_per_regions = cases %>%
dplyr::filter(area_type == "region") %>%
dplyr::group_by(date_range, area_name) %>%
dplyr::summarise(total = sum(cases)) %>%
spread(date_range, total) %>%
dplyr::select(-"<NA>") %>%
mutate(pct = (last_week - two_weeks_ago)/two_weeks_ago*100)
View(cases_per_regions)
cases_per_regions = cases %>%
dplyr::filter(area_type == "region") %>%
dplyr::group_by(date_range, area_name) %>%
dplyr::summarise(total = sum(cases)) %>%
spread(date_range, total) %>%
dplyr::select(-"<NA>")
1700+1680+1683+1720
2041
1700+1680+1683+1720+2041+1045
one_weeks_ago_end = Sys.Date() - 7
one_weeks_ago_end = Sys.Date() - 15
one_weeks_ago_end = Sys.Date() - 7
one_weeks_ago_start = Sys.Date() - 15
one_weeks_ago_start = Sys.Date() - 14
one_weeks_ago_end = Sys.Date() - 7
one_weeks_ago_start = Sys.Date() - 7*2
two_weeks_ago_end = Sys.Date() - 7*3
two_weeks_ago_start = Sys.Date() - 7*4
cases <- cases %>%
mutate(date_range = case_when(day >= one_weeks_ago_start & day < one_weeks_ago_end ~ "last_week",
day >= two_weeks_ago_start & day < two_weeks_ago_end ~ "two_weeks_ago"))
runApp()
runApp()
one_weeks_ago_end = Sys.Date() - 7
one_weeks_ago_start = Sys.Date() - 7*2
two_weeks_ago_end = Sys.Date() - 7*2+1
two_weeks_ago_start = Sys.Date() - 7*3+1
# identify days corresponding to 1 and 2 weeks ago
cases <- cases %>%
mutate(date_range = case_when(day >= one_weeks_ago_start & day < one_weeks_ago_end ~ "last_week",
day >= two_weeks_ago_start & day < two_weeks_ago_end ~ "two_weeks_ago"))
runApp()
one_weeks_ago_end = Sys.Date() - 7
one_weeks_ago_start = Sys.Date() - 7*2
two_weeks_ago_end = Sys.Date() - 7*2+1
two_weeks_ago_start = Sys.Date() - 7*3+2
# identify days corresponding to 1 and 2 weeks ago
cases <- cases %>%
mutate(date_range = case_when(day >= one_weeks_ago_start & day < one_weeks_ago_end ~ "last_week",
day >= two_weeks_ago_start & day < two_weeks_ago_end ~ "two_weeks_ago"))
one_weeks_ago_end = Sys.Date() - 7
one_weeks_ago_start = Sys.Date() - 7*2
two_weeks_ago_end = Sys.Date() - 7*2+1
two_weeks_ago_start = Sys.Date() - 7*3+2
# identify days corresponding to 1 and 2 weeks ago
cases <- cases %>%
mutate(date_range = case_when(day >= one_weeks_ago_start & day < one_weeks_ago_end ~ "last_week",
day >= two_weeks_ago_start & day < two_weeks_ago_end ~ "two_weeks_ago"))
one_weeks_ago_end = Sys.Date() - 7
one_weeks_ago_start = Sys.Date() - 7*2
two_weeks_ago_end = Sys.Date() - 7*2+1
two_weeks_ago_start = Sys.Date() - 7*3
# identify days corresponding to 1 and 2 weeks ago
cases <- cases %>%
mutate(date_range = case_when(day >= one_weeks_ago_start & day < one_weeks_ago_end ~ "last_week",
day >= two_weeks_ago_start & day < two_weeks_ago_end ~ "two_weeks_ago"))
